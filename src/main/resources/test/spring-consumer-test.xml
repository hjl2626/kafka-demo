<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">


    <context:property-placeholder location="classpath*:kafka.properties" ignore-unresolvable="true"/>

    <!-- 消费者启动器 -->
    <bean id="kafkaConsumerLauncher" class="com.kafka.consumer.KafkaConsumerLauncher" scope="singleton">
        <property name="consumerNumber" value="${kafka.consumer.consumerNumber}"/>
        <property name="consumerPool" ref="consumerPool"/>
        <property name="zookeeper_connects" value="${kafka.consumer.zookeeper_connects}"/>
        <property name="zookeeper_timeout" value="${kafka.consumer.zookeeper_timeout}"/>
        <property name="topicName" value="${kafka.consumer.topicName}"/>
        <property name="groupName" value="${kafka.consumer.groupName}"/>
    </bean>

    <!--
   =========================================================
   -->

    <!--
    以下是服务器节点专门为数据处理准备的处理线程
    因为只会有10个生产者，所以线程池的大小是固定的，也无需使用无限队列
    -->
    <bean id="consumerPool" scope="singleton" class="java.util.concurrent.ThreadPoolExecutor">
        <constructor-arg value="10" type="int"/>
        <constructor-arg value="10" type="int"/>
        <constructor-arg value="10000" type="long"/>
        <constructor-arg value="MILLISECONDS" type="java.util.concurrent.TimeUnit"/>
        <constructor-arg ref="threadCacheQueue"/>
    </bean>
    <bean id="threadCacheQueue" class="java.util.concurrent.SynchronousQueue"/>


    <!--
   消费者启动线程
   一定注意：prototype属性值，它代表着每次getBean就创建一个新的ConsumerThread对象
   -->
    <bean id="consumerThread" class="com.kafka.consumer.thread.ConsumerThread" scope="prototype"/>
</beans>